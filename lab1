// triangle.js
// –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó: triangle(value1, type1, value2, type2)");
console.log("–î–µ type ‚àà { 'leg', 'hypotenuse', 'adjacent angle', 'opposite angle', 'angle' }");
console.log("–ù–∞–ø—Ä–∏–∫–ª–∞–¥: triangle(4, 'leg', 8, 'hypotenuse');\n");

function triangle(val1, type1, val2, type2) {
    // –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ–º–∏–ª–∫–∏ —É –≤–µ–ª–∏–∫–∏—Ö –±—É–∫–≤–∞—Ö
    type1 = type1.toLowerCase();
    type2 = type2.toLowerCase();

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –≥—Ä–∞–¥—É—Å—ñ–≤ —É —Ä–∞–¥—ñ–∞–Ω–∏ —ñ –Ω–∞–≤–ø–∞–∫–∏
    const toRad = deg => deg * Math.PI / 180;
    const toDeg = rad => rad * 180 / Math.PI;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ —Ç–∏–ø—ñ–≤
    const validTypes = ["leg", "hypotenuse", "adjacent angle", "opposite angle", "angle"];
    if (!validTypes.includes(type1) || !validTypes.includes(type2)) {
        console.log("–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤. –ü–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é.");
        return "failed";
    }

    // –ó–∞–±–æ—Ä–æ–Ω–∞ –≤—ñ–¥‚Äô—î–º–Ω–∏—Ö –∞–±–æ –Ω—É–ª—å–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
    if (val1 <= 0 || val2 <= 0) {
        return "–ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º–∏.";
    }

    // –ó–º—ñ–Ω–Ω—ñ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞
    let a, b, c, alpha, beta;

    // –í–∏–ø–∞–¥–∫–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    try {
        if ((type1 === "leg" && type2 === "hypotenuse") || (type2 === "leg" && type1 === "hypotenuse")) {
            const leg = type1 === "leg" ? val1 : val2;
            const hyp = type1 === "hypotenuse" ? val1 : val2;
            if (leg >= hyp) return "–ö–∞—Ç–µ—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∞–±–æ —Ä—ñ–≤–Ω–∏–º –≥—ñ–ø–æ—Ç–µ–Ω—É–∑—ñ.";
            const otherLeg = Math.sqrt(hyp ** 2 - leg ** 2);
            const angleOpposite = toDeg(Math.asin(leg / hyp));
            const otherAngle = 90 - angleOpposite;

            a = leg;
            b = otherLeg;
            c = hyp;
            alpha = angleOpposite;
            beta = otherAngle;
        }

        else if (type1 === "leg" && type2 === "leg") {
            a = val1;
            b = val2;
            c = Math.sqrt(a ** 2 + b ** 2);
            alpha = toDeg(Math.atan(a / b));
            beta = 90 - alpha;
        }

        else if ((type1 === "hypotenuse" && type2.includes("angle")) || (type2 === "hypotenuse" && type1.includes("angle"))) {
            const hyp = type1 === "hypotenuse" ? val1 : val2;
            const angle = type1.includes("angle") ? val1 : val2;
            if (angle >= 90) return "–ö—É—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≥–æ—Å—Ç—Ä–∏–º (–º–µ–Ω—à–µ 90¬∞).";
            const alpha = angle;
            const beta = 90 - alpha;
            a = hyp * Math.sin(toRad(alpha));
            b = hyp * Math.sin(toRad(beta));
            c = hyp;
        }

        else if ((type1 === "leg" && type2.includes("angle")) || (type2 === "leg" && type1.includes("angle"))) {
            const leg = type1 === "leg" ? val1 : val2;
            const angle = type1.includes("angle") ? val1 : val2;
            if (angle >= 90) return "–ö—É—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≥–æ—Å—Ç—Ä–∏–º (–º–µ–Ω—à–µ 90¬∞).";
            const alpha = angle;
            const c = leg / Math.sin(toRad(alpha));
            const beta = 90 - alpha;
            const otherLeg = c * Math.sin(toRad(beta));
            a = leg;
            b = otherLeg;
            return triangle(leg, "leg", c, "hypotenuse"); // –ø–æ–≤—Ç–æ—Ä–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        }

        else {
            console.log("–ù–µ—Å—É–º—ñ—Å–Ω–∞ –ø–∞—Ä–∞ —Ç–∏–ø—ñ–≤. –ü–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é.");
            return "failed";
        }

        // –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è:");
        console.log(`a (–∫–∞—Ç–µ—Ç) = ${a.toFixed(3)}`);
        console.log(`b (–∫–∞—Ç–µ—Ç) = ${b.toFixed(3)}`);
        console.log(`c (–≥—ñ–ø–æ—Ç–µ–Ω—É–∑–∞) = ${c.toFixed(3)}`);
        console.log(`alpha (–∫—É—Ç –Ω–∞–≤–ø—Ä–æ—Ç–∏ a) = ${alpha.toFixed(2)}¬∞`);
        console.log(`beta (–∫—É—Ç –Ω–∞–≤–ø—Ä–æ—Ç–∏ b) = ${beta.toFixed(2)}¬∞`);
        return "success";

    } catch (e) {
        console.log("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ.");
        return "failed";
    }
}

// üîπ –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–ª–∏–∫—ñ–≤:
triangle(4, "leg", 8, "hypotenuse");
triangle(8, "hypotenuse", 4, "leg");
triangle(5, "leg", 30, "angle");
triangle(6, "leg", 8, "leg");
